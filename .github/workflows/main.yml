name: 自动编译

on:
  repository_dispatch:
  push:
    paths:
      - 'Dockerfile'
      - 'my_collectors/**'
      - 'node_exporter/**'
  workflow_dispatch:
    inputs:
      build:
        description: '编译 node_exporter 插件'
        required: true
        default: '编译 node_exporter 插件'
  schedule:
    - cron: '0 21 * * *'
  watch:
    types: [started]

permissions:
  contents: write
  actions: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    steps:
      - name: 检出代码（包含子模块）
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: 缓存 Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: 自动注册自定义采集器
        run: |
          bash my_collectors/auto_register_collectors.sh

      - name: 设置版本信息环境变量
        working-directory: node_exporter
        run: |
          echo "VERSION=$(git describe --tags --always || echo dev)" >> $GITHUB_ENV
          echo "REVISION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "BUILDUSER=$(whoami)@$(hostname)" >> $GITHUB_ENV
          echo "BUILDDATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      # 多平台二进制文件编译
      - name: 构建多平台二进制文件（静态编译）
        run: |
          go mod tidy
          mkdir -p node_exporter/.build/linux-amd64 node_exporter/.build/linux-arm64
          CGO_ENABLED=0 GOOS=linux   GOARCH=amd64  go build -C node_exporter -ldflags "-X github.com/prometheus/common/version.Version=${VERSION} -X github.com/prometheus/common/version.Revision=${REVISION} -X github.com/prometheus/common/version.Branch=${BRANCH} -X github.com/prometheus/common/version.BuildUser=${BUILDUSER} -X github.com/prometheus/common/version.BuildDate=${BUILDDATE}" -o .build/linux-amd64/node_exporter
          CGO_ENABLED=0 GOOS=linux   GOARCH=arm64  go build -C node_exporter -ldflags "-X github.com/prometheus/common/version.Version=${VERSION} -X github.com/prometheus/common/version.Revision=${REVISION} -X github.com/prometheus/common/version.Branch=${BRANCH} -X github.com/prometheus/common/version.BuildUser=${BUILDUSER} -X github.com/prometheus/common/version.BuildDate=${BUILDDATE}" -o .build/linux-arm64/node_exporter

      # 上传所有平台的二进制文件到 GitHub Actions 构建产物区
      - name: 上传多平台二进制文件
        uses: actions/upload-artifact@v4
        with:
          name: node_exporter-binaries
          path: |
            node_exporter/.build/linux-amd64/node_exporter
            node_exporter/.build/linux-arm64/node_exporter

      - name: 设置 QEMU（支持多平台 Docker 构建）
        uses: docker/setup-qemu-action@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 登录 GitHub 容器仓库（ghcr.io）
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 构建并推送多平台 Docker 镜像到 DockerHub 和 ghcr.io
        uses: docker/build-push-action@v5
        with:
          file: node_exporter/Dockerfile
          context: ./node_exporter
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            ARCH=amd64
            OS=linux
          tags: |
            ${{ github.repository_owner }}/node_exporter:latest
            ghcr.io/${{ github.repository_owner }}/node_exporter:latest 

      - name: 重命名产物以避免同名
        run: |
          mv node_exporter/.build/linux-amd64/node_exporter node_exporter/.build/linux-amd64/node_exporter-linux-amd64
          mv node_exporter/.build/linux-arm64/node_exporter node_exporter/.build/linux-arm64/node_exporter-linux-arm64

      - name: 发布到 GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest Release
          files: |
            node_exporter/.build/linux-amd64/node_exporter-linux-amd64
            node_exporter/.build/linux-arm64/node_exporter-linux-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 清理旧 Releases
        uses: dev-drprasad/delete-older-releases@v0.3.3
        with:
          keep_latest: 1
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 清理旧的 workflow artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: '1min'
          skip-recent: 1
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
